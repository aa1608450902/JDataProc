# 1. 程序对系统资源利用的配置
# 对AIM数据做join处理过程的核心线程数
# 该参数的大小会影响对AIM数据做join处理的速度
# 若AIM数据量较大时，该参数可以设置大一点，一般4~6为宜
join.thread.number = 5
# 从Kafka获取到内存的AIM数据缓存大小，供多个join线程消费
# 该参数的大小会影响程序运行时，对内存大小的占用，50~200为宜
# 程序接收到INT信号时，会先将该缓存中的数据消费完再退出
join.buffer.size = 150

# 对CNC和SN数据做存储的线程数量
# 线程数越多，存储数据越快，对CNC存储的线程数一般2~4为宜
storage.CNC.thread.number = 3
# 对SN数据存储的线程数一般设置为1
# 因为SN数据需要从数据库载入字典表到内存，所以最好不要超过1
storage.SN.thread.number = 1

# 设置bloom过滤器的大小
# 该参数大小为需要存储的AIM数据量(暂定为两个月) x AIM数据中SN字段值的大小
bloom.filter.AIM.size = 39787200
# unjoined的bloom过滤器大小暂设置为 跟上面相同的数值
bloom.filter.unjoined.size = 39787200

# 2. 数据源Kafka连接的相关配置
# Kafka所在服务器的IP地址跟段口号
kafka.server.url = 172.16.1.156:9092
# 程序从Kafka拉取数据的等待超时时间，单位为毫秒
# 该参数越小，程序在闲暇的时候也会占用很多的CPU资源
# 一般设置为5秒为宜，也就是值为5000
kafka.link.timeout = 5000
# 从Kafka消费AIM数据的分组名字
# 该参数一般随便起一个不会重复的名字即可
# 具体的实意，请参考Kafka文档中关于消费者分组的概念
AIM.group.id = aim_consumer_1
# 在Kafka中AIM数据所在的topic名称
AIM.topic = aim-topic
# 从Kafka消费CNC数据的分组名字
CNC.group.id = cnc_consumer_1
# 在Kafka中CNC数据所在的topic名称
CNC.topic = cnc-topic
# 从Kafka消费SN数据的分组名字
SN.group.id = sn_consumer_1
# 在Kafka中SN数据所在的topic名称
SN.topic = sn-topic
# 目前，程序没有处理SPM数据的逻辑，所以关于SPM的设置都没有用
SPM.group.id = spm_consumer_1
SPM.topic = spm-topic

# 3. 有关数据库存储的相关设置
# MongoDB数据库所在的IP地址跟端口号，分开设置
mongo.server.ip = 172.16.1.236
mongo.server.port = 27017
# MongoDB中所有表所在的数据库名
mongo.database = jd_join
# AIM数据表(或者叫集合)的名字
mongo.AIM.collection = aim_data
# 对AIM数据join失败的数据所用的数据表
# 有的AIM数据只是临时存放在这个表里，等到相关数据全部到来，还是会join到AIM数据表里
mongo.AIM.unjoined.collection = unjoined_aim_data
# 存放AIM的异常数据，不合法数据，缺少字段的数据等
mongo.AIM.exception.collection = aim_exc

# 4. 有关AIM数据处理逻辑的配置
# AIM数据中的产品序列号的字段名(唯一ID)
# 目前，该值可能为pid，SERIAL_NUMBER等，具体由实际情况而定
# 该参数非常重要，因为整个程序操作的逻辑都是基于各数据对应的ID进行的
AIM.unique.key = pid
# AIM数据中的时间戳字段名，具体时间戳的要求请查看详细设计文档
AIM.timestamp.key = time
# 以下为AIM数据必备的字段，且json有层级关系，请参考设计文档
AIM.pass.key = pass
AIM.data.key = data
AIM.results.key = results
AIM.station.key = station
AIM.process.key = process
# 目前的join方案是，process值为laser_qc的跟CNC数据join，为fqc的跟SPM数据join(程序目前未定义)
# 而这边，value1参数的值就是跟CNC数据join的process值
AIM.process.value1 = laser_qc
# value2参数的值关联AIM与SPM数据的join，但具体逻辑程序未定义
AIM.process.value2 = fqc
# SPC的字段名，请参考设计文档
AIM.measurements.key = measurements
# AIM数据中时间戳字段值的时区设置，+8h意思是：具体时间为时间戳字段值再加上8小时
# 这里能填入的值格式为-6h,0,+8h等，如果无需设置时区，则设置为0或+0h即可
AIM.time.diff = +8h
# 以下生成的时间字段是为后段查询服务的
# 根据时间戳字段生成的long类型的毫秒数，与时间戳所表示的时间相同
AIM.time1.key = time_1
# 根据时间戳字段生成的long类型的毫秒数, 这里是时间戳折算到小时整的时间
AIM.time2.key = time_2
# 根据时间戳字段生成的long类型的毫秒数, 这里是时间戳折算到天数整(0点)的时间
AIM.time3.key = time_3
# 请参考设计文档，关于原数据结构json的部分
AIM.spc.value.key = value
AIM.spc.upperlimit.key = upper_limit
AIM.spc.lowerlimit.key = lower_limit
AIM.spc.pass.key = good

# 5. 有关CNC数据处理逻辑的配置
# CNC数据存储的表名
mongo.CNC.collection = cnc_data
# CNC异常数据，缺字段数据等，所存储的表名
mongo.CNC.exception.collection = exc_data
# CNC数据中的唯一ID字段名，根据实际情况进行配置
CNC.unique.key = SERIAL_NUMBER
# 以下为CNC数据必须字段，程序会进行检测，不符合的将丢如异常表中
# 具体请参考设计文档
CNC.process.key = PROCESS_NAME
CNC.cell.key = CELL
CNC.machine.key = MACHINE_NAME
CNC.stage.key = STAGE_NAME
# 检测stage字段值中有CNC10的数据，否则将会被过滤掉(丢弃)，不会存入异常表
# 这边目的是为了筛选出CNC10的数据，过滤掉其他数据
CNC.stage.value = CNC10

# 6. 有关SN数据处理逻辑的配置
# SN数据存储的表名
mongo.SN.collection = sn_data
# SN异常数据的表名
mongo.SN.exception.collection = exc_data
# 以下为SN数据必须字段，程序会进行检测及解析
# WORK_ORDER为解析字段，程序会通过获取两个中划线中间的字符串，生成对应的build字段
SN.work_order.key = WORK_ORDER
# 去SYS_PART字典表查询的依据字段
SN.model_id.key = MODEL_ID
SN.process_id.key = PROCESS_ID
# 过滤筛选字段，筛选出process_id字段值为105379的数据
SN.process_id.value = 105379
# SN数据中的唯一ID字段名，根据实际情况进行配置
SN.unique.key = SERIAL_NUMBER
# 以下为生成的字段，部分通过查寻字典表所得
# SITE字段值目前固定为RT
SN.site.key = SITE
SN.site.value = RT
# 从WORL_ORDER字段中解析
SN.build.key = BUILD
# 目前为空字符串
SN.special_build.key = SPECIAL_BUILD
# wifi_4g，color，product_code为从字典表中查询出来的字段
SN.wifi_4g.key = WIFI_4G
SN.color.key = COLOR
SN.product_code.key = PRODUCT_CODE
# 以下为字典表数据的一些配置
# 心跳机制，如果接收到Kafka关于字典数据topic的心跳数据，则程序会去MongoDB中重新获取SYS_PART字典表的数据
# Kafka的url
dictionary.kafka.url = localhost:9092
# 心跳机制的Kafka分组名
dictionary.consumer.group.id = dic_group1
# topic名
dictionary.kafka.topic = dict-topic
# 字典表所在MongoDB数据库的IP地址跟端口号
dictionary.mongo.ip = 172.16.1.236
dictionary.mongo.port = 27017
# 数据库名
dictionary.mongo.database = jd_join
# 数据表名
dictionary.mongo.collection = color_dict
# 字典表中对应的几个字段名，对应上面的model_id, product_code, wifi_4g和color(顺序不定)
SN.material_type.key = MATERIAL_TYPE
SN.jancode.key = JANCODE
SN.upccode.key = UPCCODE
SN.part_id.key = PART_ID